import { useState } from "react";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import client from "../utility/sanity";

import { Navbar } from "../components";

const Home = ({ data  }) => {
  const [name, setName] = useState("");
  const [price, setPrice] = useState("");
  const [details, setDetails] = useState("");
  const [editingItemId, setEditingItemId] = useState(null);
  const [dataa, setData] = useState([]);

  const handleEdit = (itemId) => {
    // Set the values of the item being edited in the form
    const itemToEdit = data.find((item) => item._id === itemId);
    if (itemToEdit) {
      setName(itemToEdit.name);
      setPrice(itemToEdit.price.toString());
      setDetails(itemToEdit.details);
      setEditingItemId(itemId);
    }
  };

  const handleCancelEdit = () => {
    // Clear the form and reset the editing state
    setName("");
    setPrice("");
    setDetails("");
    setEditingItemId(null);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (editingItemId) {
      const updatedDocumentData = {
        name,
        price: parseFloat(price),
        details,
      };

      // Call the function to update the document
      await updateDocument(editingItemId, updatedDocumentData);
    } else {
      // Create an object with the form data
      const newDocumentData = {
        name,
        price: parseFloat(price),
        details,
      };

      // Call the function to create the document
      await createDocument(newDocumentData);

      // Clear the form fields
      setName("");
      setPrice("");
      setDetails("");
      setEditingItemId(null);
    }
  };

  const updateDocument = async (itemId, documentData) => {
    try {
      console.log("Updating document", itemId, documentData);
      const response = await client.patch(itemId).set(documentData);
      console.log("Document updated:", response);
  
      // Update the state with the updated data
      setData(prevData =>
        prevData.map(item =>
          item._id === itemId ? { ...item, ...documentData } : item
        )
      );
      // Reset the form fields and editing state
      setName("");
      setPrice("");
      setDetails("");
      setEditingItemId(null);
    } catch (error) {
      console.error("Error updating document:", error);
    }
  };
  
  

  const createDocument = async (documentData) => {
    try {
      console.log("documentData", documentData);
      const response = await client.create({
        _type: "ecomm", // Specify the document type (schema name)
        ...documentData,
      });
      console.log("New document created:", response);
    } catch (error) {
      console.error("Error creating document:", error);
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>EcommJ</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Navbar />

        <div className="products-heading py-5">
          <h2>Best Selling Products</h2>
        </div>

        <div className="py-5">
          <h3>Form data to send in sanity.io</h3>
          <form onSubmit={handleSubmit} className="py-2">
            <div>
              <div>
                <label>Name :</label>
              </div>
              <input
                type="text"
                placeholder="Name"
                value={name}
                className="border-green-900 border-solid border-4 outline-none"
                onChange={(e) => setName(e.target.value)}
              />
            </div>

            <div>
              <div>
                <label>Price :</label>
              </div>
              <input
                type="number"
                placeholder="Price"
                value={price}
                className="border-green-900 border-solid border-4 outline-none"
                onChange={(e) => setPrice(e.target.value)}
              />
            </div>
            <div>
              <div>
                <label>Details :</label>
              </div>
              <textarea
                placeholder="Details"
                value={details}
                className="border-green-900 border-solid border-4 outline-none"
                onChange={(e) => setDetails(e.target.value)}
              />
            </div>
            <button className="bg-green-600 w-25 text-black border-l-red-50 border-solid" type="submit">
              Submit
            </button>
          </form>
        </div>

        <div className="py-3">
          <div className="products-container">
            {/* ... product mapping ... */}
          </div>
          <div className="py-4">
            {data?.map((item) => (
              <div key={item._id}>
                <h2>{item.name}</h2>
                <p>Price: {item.price}</p>
                <p>Details: {item.details}</p>
                <button onClick={() => handleEdit(item._id)} className="bg-orange-600">Edit the Document</button>
              </div>
            ))}
          </div>
        </div>
      </main>
    </div>
  );
};

export async function getStaticProps() {
  const query = `*[_type == "ecomm"]`;
  const data = await client.fetch(query);
  return {
    props: {
      data,
      // initialData: data,
    },
  };
}

export default Home;
